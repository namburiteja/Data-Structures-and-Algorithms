class Solution {
    public int search(int[] nums, int target) {
        int l = 0;
        int r = nums.length-1;
        while(l<=r){
            int mid = l+(r-l)/2;
            if(nums[mid]==target) return mid;
            if(nums[mid] >= nums[l]){
                if((target >= nums[l]) && (target <= nums[mid])){
                    r = mid-1;
                }
                else{
                    l = mid+1;
                }
            }
            else if(nums[mid]<=nums[r]){
                if((target>=nums[mid]) && (target<=nums[r])){
                    l = mid+1;
                }
                else{
                    r = mid-1;
                }
            }
        }
        return -1;
    }
}
CLEAR EXPLANATION, INTUTION, APPROACH AND TIME-SPACE COMPLEXITY - 
https://leetcode.com/problems/search-in-rotated-sorted-array/solutions/6855158/easy-solution-java-binary-search-100-bea-tvet/
