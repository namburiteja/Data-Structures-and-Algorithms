class Solution {
    public List<Integer> spiralOrder(int[][] matrix) {
        ArrayList<Integer> li = new ArrayList<>();
        int left = 0;
        int right = matrix[0].length-1;
        int down = matrix.length-1;
        int top = 0;
        while(left<=right && top<=down){
            for(int i=left;i<=right;i++){
                li.add(matrix[top][i]);
            }
            top++; 
            for(int i=top;i<=down;i++){
                li.add(matrix[i][right]);
            }
            right--;//right = 1;
            if(top<=down){
                for(int i=right;i>=left;i--){
                    li.add(matrix[down][i]);
                }
                down--; // down = 2;
            }
            if(left<=right){
                for(int i=down;i>=top;i--){
                    li.add(matrix[i][left]);
                }
                left++;
            }
        }  
        return li; 
    }
}
FOR CLEAR EXPLANATION, INTUTION, APPROACH AND TIME-SPACE COMPLEXITY - 
https://leetcode.com/problems/spiral-matrix/solutions/6880068/easy-and-straight-forward-solution-java-311n8/
