import java.util.*;
class Main {
    public static void main(String[] args) {
        String s = "(a + b * c) / (a - b * c)";
        Stack<Character> st = new Stack<>();
        StringBuilder ss = new StringBuilder();
        for(int i=0;i<s.length();i++){
            if(((s.charAt(i)>='a') && (s.charAt(i)<='z')) || ((s.charAt(i)>='A') && (s.charAt(i)<='Z')) || ((s.charAt(i)>='0') && (s.charAt(i)<='9'))){
                ss.append(s.charAt(i));
            }
            if((s.charAt(i)=='(')){
                st.push('(');
            }
            if(s.charAt(i)==')'){
                if(!st.isEmpty()){
                    while(st.peek()!='('){
                        char y = st.pop();
                        ss.append(y);
                    }
                    st.pop();
                }
            }
            if((s.charAt(i)=='+') || (s.charAt(i)=='-')){
                while((!st.isEmpty()) && ((st.peek()=='*') || (st.peek()=='/') || (st.peek()=='^') )){
                    char x = st.pop();
                    ss.append(x); 
                }
                st.push(s.charAt(i));
            }
            else if((s.charAt(i)=='*') || (s.charAt(i)=='/')){
                while((!st.isEmpty()) && (st.peek()=='^')){
                    char x = st.pop();
                    ss.append(x);
                }
                st.push(s.charAt(i));
            }
            else if(s.charAt(i) == '^'){
                st.push(s.charAt(i));
            }
        }
        while(!st.isEmpty()){
            ss.append(st.pop());
        }
        System.out.print(ss);
    }
}
TIME COMPLEXITY = O(N)+O(N) - for main for loop and the rest while loops
SPACE COMPLEXITY = O(N)+O(N) - for stack data structure and for StringBuilder
