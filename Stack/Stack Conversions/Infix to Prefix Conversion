import java.util.*;
class Main{
    static int precedence(char x){
        if(x=='(' || x==')') return 0;
        else if(x=='+' || x=='-') return 1;
        else if(x=='*' || x=='/') return 2;
        else if(x=='^') return 3;
        return -1;
    }
    public static String infixToPrefix(String s){
        StringBuilder temp = new StringBuilder();
        for(int i=0;i<s.length();i++){
            if(s.charAt(i)=='(') temp.append(')');
            else if(s.charAt(i)==')') temp.append('(');
            else temp.append(s.charAt(i));
        }
        temp.reverse();
        StringBuilder ss = new StringBuilder();
        Stack<Character> st = new Stack<>();
        for(int i=0;i<temp.length();i++){
            char ch = temp.charAt(i);
            if(Character.isLetterOrDigit(ch)){
                ss.append(ch);
            }
            else if(ch=='('){
                st.push(ch);
            }
            else if(ch==')'){
                while(!st.isEmpty() && st.peek()!='('){
                    ss.append(st.pop());
                }
                st.pop();
            }
            else{
                while(!st.isEmpty() && precedence(ch)<precedence(st.peek())){
                    ss.append(st.pop());
                }
                st.push(ch);
            }
        }
        while(!st.isEmpty()){
            ss.append(st.pop());
        }
        return ss.reverse().toString();
    }
    public static void main(String[] args){
        String s = "(a+b)*c";
        System.out.print(infixToPrefix(s));
    }
}
// TIME COMPLEXITY = O(N)+O(N)+O(N) - for main for loop and the rest while loops and for reversal of stringBuilder
// SPACE COMPLEXITY = O(N)+O(N) - for stack data structure and for StringBuilder
