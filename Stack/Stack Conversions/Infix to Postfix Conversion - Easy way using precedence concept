import java.util.*;
class Main{
    static int precedence(char x){
        if((x=='(') || (x==')')) return 0;
        else if((x=='+') || (x=='-')) return 1;
        else if((x=='*') || (x=='/')) return 2;
        else if(x=='^') return 3;
        return -1;
    }
    public static String infixToPostfix(String s){
        StringBuilder ss = new StringBuilder();
        Stack<Character> st = new Stack<>();
        for(int i=0;i<s.length();i++){
            char ch = s.charAt(i);
            if(Character.isLetterOrDigit(ch)){
                ss.append(ch);
            }
            else if(ch=='('){
                st.push(ch);
            }
            else if(ch==')'){
                while(!st.isEmpty() && st.peek()!='('){
                    char temp = st.pop();
                    ss.append(temp);
                }
                st.pop();
            }
            else{
                while(!st.isEmpty() && precedence(ch)<=precedence(st.peek())){
                    char temp = st.pop();
                    ss.append(temp);
                }
                st.push(ch);
            }
        }
        while(!st.isEmpty()){
            ss.append(st.pop());
        }
        return ss.toString();
    }
    public static void main(String[] args){
        String s = "a";
        System.out.println(infixToPostfix(s));
    }
}
// TIME COMPLEXITY = O(N)+O(N) - for main for loop and the rest while loops
// SPACE COMPLEXITY = O(N)+O(N) - for stack data structure and for StringBuilder
