class Solution {
    public static void bfs(int i,int j,int[][] grid){
        Queue<int[]> q = new LinkedList<>();
        q.add(new int[]{i,j});
        grid[i][j] = 2;
        while(!q.isEmpty()){
            int[] node = q.poll();
            int x = node[0];
            int y = node[1];
            int[] dx = {-1,0,1,0};
            int[] dy = {0,-1,0,1};
            for(int it=0;it<4;it++){
                int newx = x+dx[it];
                int newy = y+dy[it];
                if(newx>=0 && newy>=0 && newx<grid.length && newy<grid[0].length && grid[newx][newy]==1){
                    q.add(new int[]{newx,newy});
                    grid[newx][newy] = 2;
                }
            }
        }
    }
    public int numEnclaves(int[][] grid) {
        int m = grid.length;
        int n = grid[0].length;
        for(int i=0;i<m;i++){
            if(grid[i][0]==1) bfs(i,0,grid);
            if(grid[i][n-1]==1) bfs(i,n-1,grid);
        }
        for(int i=0;i<n;i++){
            if(grid[0][i]==1) bfs(0,i,grid);
            if(grid[m-1][i]==1) bfs(m-1,i,grid);
        }
        int ans = 0;
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if(grid[i][j]==1) ans++;
            }
        }
        return ans;
    }
}
FOR CLEAR EXPLANATION, INTUTION, APPROACH AND TIME-SPACE COMPLEXITY -
https://leetcode.com/problems/number-of-enclaves/solutions/7039841/easy-solution-java-using-bfs-by-teja_nam-rauz/
