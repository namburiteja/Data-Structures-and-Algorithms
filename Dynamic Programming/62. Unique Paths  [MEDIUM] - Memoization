class Solution {
    protected int countPaths(int i,int j,int[][] dp){
        if(i==0 && j==0) return 1;
        if(i<0 || j<0) return 0;
        if(dp[i][j]!=-1) return dp[i][j];
        int left = countPaths(i,j-1,dp);
        int right = countPaths(i-1,j,dp);
        return dp[i][j] = left + right;
    }
    public int uniquePaths(int m, int n) {
        int[][] dp = new int[m][n];
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                dp[i][j] = -1;
            }
        }
        return countPaths(m-1,n-1,dp);
    }
}
FOR CLEAR EXPLANATION, INTUTION, APPROACH AND TIME-SPACE COMPLEXITY - 
https://leetcode.com/problems/unique-paths/solutions/7151519/memoized-version-java-0ms-100-beats-by-t-xz5o/
