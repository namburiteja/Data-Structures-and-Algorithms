class Solution {
    public int minPathSum(int i,int j,int[][] arr,Integer[][] dp){
        if(i==arr.length-1) return arr[i][j];
        if(dp[i][j]!=null) return dp[i][j];
        int left = Integer.MAX_VALUE;
        int down = arr[i][j];
        int right = Integer.MAX_VALUE;
        if(j-1>=0) left = arr[i][j] + minPathSum(i+1,j-1,arr,dp);
        down+=minPathSum(i+1,j,arr,dp);
        if(j+1<arr.length) right = arr[i][j] + minPathSum(i+1,j+1,arr,dp);
        return dp[i][j] = Math.min(left,Math.min(down,right));
    }
    public int minFallingPathSum(int[][] matrix) {
        int n = matrix.length;
        int maxi = Integer.MAX_VALUE;
        Integer[][] dp = new Integer[n][n];
        for(int i=0;i<n;i++){
            int ans = minPathSum(0,i,matrix,dp);
            maxi = Math.min(maxi,ans);
        }
        return maxi;
    }
}
