/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<Integer> rightSideView(TreeNode root) {
        Deque<TreeNode> q = new ArrayDeque<>();
        List<Integer> arr = new ArrayList<>();
        if(root==null) return arr;
        q.add(root);
        while(!q.isEmpty()){
            int size = q.size();
            arr.add(q.getLast().val);
            for(int i=0;i<size;i++){
                TreeNode node = q.removeFirst();
                if(node.left!=null) q.add(node.left);
                if(node.right!=null) q.add(node.right);
            }
        }
        return arr;
    }
}
FOR CLEAR EXPLANATION, INTUTION, APPROACH AND TIME-SPACE COMPLEXITY -
https://leetcode.com/problems/binary-tree-right-side-view/solutions/6936083/easy-solution-java-1ms-using-deque-ds-by-9cvv/
