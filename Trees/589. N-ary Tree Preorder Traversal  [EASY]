/*
// Definition for a Node.
class Node {
    public int val;
    public List<Node> children;

    public Node() {}

    public Node(int _val) {
        val = _val;
    }

    public Node(int _val, List<Node> _children) {
        val = _val;
        children = _children;
    }
};
*/

class Solution {
    public List<Integer> preorder(Node root) {
        List<Integer> arr = new ArrayList<>();
        if(root==null) return arr;
        predfs(root,arr);
        return arr;
    }
    public static void predfs(Node node,List<Integer> arr){
        arr.add(node.val);
        for(Node n:node.children){
            predfs(n,arr);
        }
    }
}
FOR CLEAR EXPLANATION, INTUTION, APPROACH AND TIME-SPACE COMPLEXITY -
https://leetcode.com/problems/n-ary-tree-preorder-traversal/solutions/6990879/easy-solution-java-0ms-100-beats-by-teja-iv6s/
