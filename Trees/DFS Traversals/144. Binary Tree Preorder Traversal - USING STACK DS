/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<Integer> preorderTraversal(TreeNode root) {
        List<Integer> arr = new ArrayList<>();
        Stack<TreeNode> st = new Stack<TreeNode>();
        if(root==null) return arr;
        TreeNode node = root;
        st.push(node);
        while(!st.isEmpty()){
            node = st.pop();
            arr.add(node.val);
            if(node.right!=null) st.push(node.right);
            if(node.left!=null) st.push(node.left);
        } 
        return arr;
    }
}
FOR CLEAR EXPLANATION, INTUTION, APPROACH AND TIME-SPACE COMPLEXITY -
https://leetcode.com/problems/binary-tree-preorder-traversal/solutions/6891545/easy-solution-java-using-stack-0ms-100-b-3fid/
